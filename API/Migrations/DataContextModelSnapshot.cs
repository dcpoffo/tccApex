// <auto-generated />
using System;
using API.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Thor"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Howe"
                        });
                });

            modelBuilder.Entity("API.models.NaoConformidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProblemaId")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<double>("Quantidade")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ProblemaId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("NaoConformidade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 1,
                            DataAbertura = new DateTime(2020, 9, 3, 23, 43, 43, 655, DateTimeKind.Local).AddTicks(5106),
                            ProblemaId = 1,
                            ProdutoId = 1,
                            Quantidade = 10.0
                        },
                        new
                        {
                            Id = 2,
                            ClienteId = 2,
                            DataAbertura = new DateTime(2020, 9, 3, 23, 43, 43, 656, DateTimeKind.Local).AddTicks(6782),
                            ProblemaId = 2,
                            ProdutoId = 2,
                            Quantidade = 100.0
                        },
                        new
                        {
                            Id = 3,
                            ClienteId = 2,
                            DataAbertura = new DateTime(2020, 9, 3, 23, 43, 43, 656, DateTimeKind.Local).AddTicks(6868),
                            ProblemaId = 4,
                            ProdutoId = 3,
                            Quantidade = 50.0
                        });
                });

            modelBuilder.Entity("API.models.Problema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Problema");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Cabo não decapa"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Diâmetro acima do especificado"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Diâmetro abaixo do especificado"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Cabo com tonalidade"
                        });
                });

            modelBuilder.Entity("API.models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnidadeMedida")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Produto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Cabo PP Plano 3x0,50 NBR14897",
                            UnidadeMedida = "Metro"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Cabo PP Circular 3x0,50 NBR247",
                            UnidadeMedida = "Metro"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Cabo Techflex 1x0,50 NBR9117 - BR",
                            UnidadeMedida = "Metro"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Cabo Techflex 1x0,75 DIN - PT",
                            UnidadeMedida = "Metro"
                        });
                });

            modelBuilder.Entity("API.models.NaoConformidade", b =>
                {
                    b.HasOne("API.models.Cliente", "Cliente")
                        .WithMany("NaoCorformidades")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.models.Problema", "Problema")
                        .WithMany("NaoCorformidades")
                        .HasForeignKey("ProblemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.models.Produto", "Produto")
                        .WithMany("NaoCorformidades")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
